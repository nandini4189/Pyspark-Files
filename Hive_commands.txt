CREATE DATABASE IF NOT EXISTS cards;

CREATE TABLE deck_of_cards (
COLOR string,
SUIT string,
PIP string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
STORED AS TEXTFILE;

LOAD DATA LOCAL INPATH '/raghu/cards.txt' INTO TABLE deck_of_cards;

LOAD DATA LOCAL INPATH '/Raghu/cards.txt' OVERWRITE INTO TABLE deck_of_cards;

CREATE EXTERNAL TABLE deck_of_cards_external (
COLOR string,
SUIT string,
PIP string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
STORED AS TEXTFILE
LOCATION '/apps/hive/warehouse/cards.db/deck_of_cards1';

CREATE DATABASE IF NOT EXISTS retail_ods;
CREATE DATABASE retail_edw;
CREATE DATABASE retail_stage;

USE retail_stage;
CREATE TABLE orders_demo (
order_id int,
order_date string,
order_customer_id int,
order_status string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

use retail_ods;

CREATE TABLE categories (
category_id int,
category_department_id int,
category_name string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE customers (
customer_id       int,
customer_fname    string,
customer_lname    string,
customer_email    string,
customer_password string,
customer_street   string,
customer_city     string,
customer_state    string,
customer_zipcode  string 
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE departments (
department_id int,
department_name string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE orders (
order_id int,
order_date string,
order_customer_id int,
order_status string
)
PARTITIONED BY (order_month string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE order_items_ods (
order_item_id int,
order_item_order_id int,
order_item_order_date string,
order_item_product_id int,
order_item_quantity smallint,
order_item_subtotal float,
order_item_product_price float
)
PARTITIONED BY (order_month string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE orders_bucket (
order_id int,
order_date string,
order_customer_id int,
order_status string
)
CLUSTERED BY (order_id) INTO 16 BUCKETS
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE order_items_bucket (
order_item_id int,
order_item_order_id int,
order_item_order_date string,
order_item_product_id int,
order_item_quantity smallint,
order_item_subtotal float,
order_item_product_price float
)
CLUSTERED BY (order_item_order_id) INTO 16 BUCKETS
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE products (
product_id int, 
product_category_id int,
product_name string,
product_description string,
product_price float,
product_image string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

-- Create edw tables (following dimension model)
use retail_edw;

CREATE TABLE products_dimension (
product_id int,
product_name string,
product_description string,
product_price float,
product_category_name string,
product_department_name string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

CREATE TABLE order_fact (
order_item_order_id int,
order_item_order_date string,
order_item_product_id int,
order_item_quantity smallint,
order_item_subtotal float,
order_item_product_price float
)
PARTITIONED BY (product_category_department string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

-- Creating partitioned table
CREATE TABLE orders_partitioned_static (
  order_id int,
  order_date string,
  order_customer_id int,
  order_status string
)
PARTITIONED BY (order_month string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
STORED AS TEXTFILE;

-- Adding static partitions
alter table orders_partitioned_static add partition (order_month='2014-01');

-- Copying data into static partition
-- Load command works when the files being copied only have data with order_date from 2014-01
-- Using insert command
insert into table orders_partitioned_static partition (order_month='2014-01')
select * from orders where order_date like '2014-01%';


CREATE TABLE orders_partitioned_dynamic_nonstrict (
  order_id int,
  order_date string,
  order_customer_id int,
  order_status string
)
PARTITIONED BY (order_month string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
STORED AS TEXTFILE;

-- Make sure hive execution engine is pointing to mr (for Cloudera certifications)
set hive.execution.engine=mr;

-- Validate partition parameters
hive.exec.dynamic.partition=true
hive.exec.dynamic.partition.mode=nostrict

-- If hive.exec.dynamic.partition.mode nonstrict, no need to add any partitions
-- Use insert command to copy data from source table orders
insert into table orders_partitioned_dynamic_nonstrict partition (order_month)
select o.*, substr(order_date, 1, 7) order_month from orders o;

CREATE TABLE orders_partitioned_dynamic_strict (
  order_id int,
  order_date string,
  order_customer_id int,
  order_status string
)
PARTITIONED BY (order_year string, order_month string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|'
STORED AS TEXTFILE;

-- Make sure hive execution engine is pointing to mr (for Cloudera certifications)
set hive.execution.engine=mr;

-- Validate partition parameters
hive.exec.dynamic.partition=true
hive.exec.dynamic.partition.mode=strict

-- If hive.exec.dynamic.partition.mode strict we need to have static partition for parent
alter table orders_partitioned_dynamic_strict 
  add partition (order_year='2013', order_month='01')
      partition (order_year='2014', order_month='01');

-- If hive.exec.dynamic.partition.mode nostrict, no need to add any partitions
-- Use insert command to copy data from source table orders
insert into table orders_partitioned_dynamic_strict partition (order_year='2014', order_month)
select o.*, substr(order_date, 6, 2) order_month from orders o where order_date like '2014%';

insert into table orders_partitioned_dynamic_strict partition (order_year='2013', order_month)
select o.*, substr(order_date, 6, 2) order_month from orders o where order_date like '2013%';


use retail_stage;

CREATE TABLE orders_stage (
order_id int,
order_date string,
order_customer_id int,
order_status string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

load data local inpath '/tmp/orders.psv' overwrite into table orders_stage;

CREATE TABLE order_items_ods (
order_item_id int,
order_item_order_id int,
order_item_order_date string,
order_item_product_id int,
order_item_quantity smallint,
order_item_subtotal float,
order_item_product_price float
)
PARTITIONED BY (order_month string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

insert overwrite table retail_ods.orders partition (order_month)
select order_id, order_date, order_customer_id, order_status,
substr(order_date, 1, 7) order_month from retail_stage.orders_stage;

CREATE TABLE order_items (
order_item_id int,
order_item_order_id int,
order_item_product_id int,
order_item_quantity smallint,
order_item_subtotal float,
order_item_product_price float
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

insert overwrite table retail_ods.order_items_ods partition (order_month)
select oi.order_item_id, oi.order_item_order_id,o.order_date,oi.order_item_product_id, oi.order_item_quantity,oi.order_item_subtotal,oi.order_item_product_price,
,substr(o.order_date, 1, 7) order_month from retail_stage.orders_items oi join orders o on oi.order_item_order_id = o.order_id;

insert overwrite table order_items partition (order_month)
select oi.order_item_id, oi.order_item_order_id, o.order_date,
oi.order_item_product_id, oi.order_item_quantity, oi.order_item_subtotal,
oi.order_item_product_price, substr(o.order_date, 1, 7)
order_month from retail_stage.order_items oi join retail_stage.orders_stage o
on oi.order_item_order_id = o.order_id;

beeline
!connect jdbc:hive2://localhost:10000
 Set hive.metastore.schema.verification=true;
hive-site.xml

SELECT order_status, count(1) FROM orders
WHERE order_date = '2013-12-14 00:00:00.0'
GROUP BY order_status
ORDER BY order_status;

SELECT order_date, count(1) FROM orders
WHERE order_date <= '2013-12-14 00:00:00.0' AND order_status = 'COMPLETE'
GROUP BY order_date
ORDER BY order_date;

SELECT order_date, count(1) FROM orders
WHERE order_date LIKE '2013-12%' AND order_status IN ('PENDING', 'PENDING_PAYMENT', 'PAYMENT_REVIEW', 'ON_HOLD')
-- order_date LIKE '2013-12%' AND (order_status = 'PENDING' or order_status = 'PENDING_PAYMENT'....)
GROUP BY order_date
ORDER BY order_date;

SELECT order_date, count(1) FROM orders
WHERE order_date BETWEEN '2013-12-01 00:00:00.0' AND '2013-12-31 00:00:00.0'
AND (order_status LIKE 'PENDING%' OR order_status IN ('PAYMENT_REVIEW', 'ON_HOLD'))
GROUP BY order_date
ORDER BY order_date;

CREATE DATABASE IF NOT EXISTS hive_demo;

-- set hive.txn.manager by default it uses DummyTxnManager
set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;

-- Also make sure these properties are set
--    hive.support.concurrency – true
--    hive.enforce.bucketing – true (Not required as of Hive 2.0)
--    hive.exec.dynamic.partition.mode – nonstrict
--    hive.compactor.initiator.on – true (for exactly one instance of the Thrift metastore service)
--    hive.compactor.worker.threads – a positive number on at least one instance of the Thrift metastore service

-- Creating table
-- Make sure table is bucketed, file format is orc and 
-- transactional is set to true under tblproperties

create table hive_transactions (i int, j string)
clustered by (i) into 4 buckets
stored as orc
tblproperties ('transactional'='true');

-- Inserting data
insert into table hive_transactions values (1, 'itversity');
insert into table hive_transactions values (2, 'itversity');

--or insert into table hive_transactions (i, j) values (1, 'itversity');

-- Updating data
update hive_transactions set j = 'IT Versity' where i = 2;

-- Deleting data
delete hive_transactions where i = 1;
